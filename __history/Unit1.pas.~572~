unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, JvBaseDlg, JvJVCLAboutForm, Vcl.StdCtrls, inifiles,
  Vcl.ComCtrls, Vcl.Buttons, Vcl.ExtCtrls, Vcl.AppEvnts, System.Generics.Collections;

type
  TformEditFile = class(TForm)
    btnOpen: TButton;
    btnCancel: TButton;
    btnNew: TButton;
    btnUpdtSave: TButton;
    btnCloseFile: TButton;
    richTxt: TRichEdit;
    btnBold: TButton;
    btnUnderline: TButton;
    btnItalic: TButton;
    cbColor: TColorBox;
    cbFont: TComboBox;
    cbFontSize: TComboBox;
    ApplicationEvents1: TApplicationEvents;
    cbLanguage: TComboBox;
    procedure btnOpenClick(Sender: TObject);
    procedure btnNewClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure btnUpdtSaveClick(Sender: TObject);
    procedure btnCloseFileClick(Sender: TObject);
    procedure btnCloseFileMouseEnter(Sender: TObject);
    procedure btnOpenMouseEnter(Sender: TObject);
    procedure btnBoldClick(Sender: TObject);
    procedure btnUnderlineClick(Sender: TObject);
    procedure btnItalicClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure cbColorChange(Sender: TObject);
    procedure cbFontChange(Sender: TObject);
    procedure cbFontSizeChange(Sender: TObject);
    procedure richTxtSelectionChange(Sender: TObject);
    procedure richTxtKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure ApplicationEvents1Message(var Msg: tagMSG; var Handled: Boolean);
    procedure FindTextAndSelect(text : string);
    procedure FindLanguageReservedWords(text : array of string);
    procedure FindCommentsInText(commBegin, commEnd : string);
    procedure cbLanguageChange(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  formEditFile: TformEditFile;

implementation

{$R *.dfm}

uses Unit2, SearchPath, Global, DefaultFolder;

procedure TformEditFile.btnCancelClick(Sender: TObject);
begin
  Application.Terminate;
end;

procedure TformEditFile.btnCloseFileClick(Sender: TObject);
begin
  richTxt.Lines.Create.Clear;

  btnUpdtSave.Visible := False;
  btnNew.Visible := True;

  Self.Caption := 'Novo';
end;

procedure TformEditFile.btnCloseFileMouseEnter(Sender: TObject);
begin
  btnCloseFile.ShowHint := True;
  btnCloseFile.Hint := HINT_CLOSE_FILE;
end;

procedure TformEditFile.btnNewClick(Sender: TObject);
var
  formCreateFile : TformCreateFile;
begin
  if richTxt.Lines.Text = '' then
  begin
    if MessageDlg(FILE_EMPTY, mtConfirmation, [mbYes, mbNo], 0) = mrYes then
    begin
      formCreateFile := TformCreateFile.Create(Self);

      formCreateFile.ShowModal;
    end;
  end
  else
  begin
    formCreateFile := TformCreateFile.Create(Self);

    formCreateFile.ShowModal;
  end;
end;

procedure TformEditFile.btnOpenClick(Sender: TObject);
var
  formSearchPath : TformSearchPath;
begin
  {AssignFile(fileTxt,'asdf');
  t := TStringList.Create;

  t.Add(memText.Lines.Text);

  t.SaveToFile('C:\Users\José Augusto Braz\Desktop\Nova pasta\name.txt');}

  formSearchPath := TformSearchPath.Create(Self);

  formSearchPath.Show;
end;

procedure TformEditFile.btnOpenMouseEnter(Sender: TObject);
begin
  btnOpen.ShowHint := True;
  btnOpen.Hint := HINT_OPEN_EXISTING_FILE;
end;

procedure TformEditFile.btnUpdtSaveClick(Sender: TObject);
begin
  try
    richTxt.Lines.SaveToFile(Self.Caption);

    ShowMessage(FILE_UPDATE_SUCCESS);

  except on E : Exception do
    ShowMessage(FILE_UPDATE_ERROR +
                #13#10 + #13#10 +
                'Motivo: ' + e.Message);
  end;
end;

procedure TformEditFile.cbColorChange(Sender: TObject);
begin
  richTxt.SelAttributes.Color := cbColor.Selected;
end;

procedure TformEditFile.cbFontChange(Sender: TObject);
begin
  richTxt.SelAttributes.Name := cbFont.Items[cbFont.ItemIndex];
end;

procedure TformEditFile.cbFontSizeChange(Sender: TObject);
begin
  richTxt.SelAttributes.Size := StrToInt(cbFontSize.Items[cbFontSize.ItemIndex]);
end;

procedure TformEditFile.cbLanguageChange(Sender: TObject);
begin
  if cbLanguage.Text = 'Delphi' then
  begin
    FindLanguageReservedWords(DELPHI_RESERVED_WORDS);
    FindCommentsInText('{','}');
  end;
end;

procedure TformEditFile.FindLanguageReservedWords(text: array of string);
var
  i, startPos, endPos, pos : Integer;
begin
  {Evita o delay na pesquisa pela palavra}
  richTxt.Lines.BeginUpdate;

  {Pesquisa palavras correspondentes para cada posição do array}
  for i := 0 to length(DELPHI_RESERVED_WORDS) - 1 do
  begin
    {Início do texto}
    startPos := 0;

    {A posição final recebe o Length (tamanho total) do texto contido no RichEdit}
    endPos := Length(richTxt.Text);

    {Enquanto existir textos correspondentes ao da pesquisa}
    while (richTxt.FindText(DELPHI_RESERVED_WORDS[i], startPos, endPos, [stWholeWord]) <> -1) do
    begin
      endPos := Length(richTxt.Text) - startPos;
      pos := richTxt.FindText(DELPHI_RESERVED_WORDS[i], startPos, endPos, [stWholeWord]);
      Inc(startPos, length(DELPHI_RESERVED_WORDS[i]));
      {Seleciona o texto correspondente}
      richTxt.SelStart := pos;
      richTxt.SelLength := Length(DELPHI_RESERVED_WORDS[i]);
      {Altera a cor do texto correspondente, bem como o altera para negrito}
      richTxt.SelAttributes.Color := clBlue;
      richTxt.SelAttributes.Style := richTxt.SelAttributes.Style + [fsBold];
    end;
  end;
  richTxt.Lines.EndUpdate;
end;

procedure TformEditFile.FindCommentsInText(commBegin, commEnd : string);
var
  i, commCount, posCommBegin, posCommEnd, startPos, endPos, pos : Integer;
  startPosList : TList<Integer>;
begin

  startPosList := TList<Integer>.Create;

  startPos := 0;
  endPos := Length(richTxt.Text);

  commCount := 0;
  while (richTxt.FindText(commBegin, startPos, endPos, []) <> -1) do
  begin
    startPos := richTxt.FindText(commBegin, startPos, endPos, []);
    startPosList.Add(startPos);
    commCount := commCount + 1;
    Inc(startPos);
  end;

  {Evita o delay na pesquisa pela palavra}
  richTxt.Lines.BeginUpdate;

  for i := 0 to startPosList.Count - 1 do
  begin
    //ShowMessage(IntToStr(startPosList.Items[i]));

    startPos := startPosList.Items[i];

    {A posição final recebe o Length (tamanho total) do texto contido no RichEdit}
    endPos := Length(richTxt.Text);

    {Enquanto existir textos correspondentes ao da pesquisa e ainda não estiverem comentados}
    while (richTxt.FindText(commBegin, startPos, endPos, []) <> -1) and
      (richTxt.SelAttributes.Color <> clGreen) do
    begin
      endPos := Length(richTxt.Text) - startPosList.Items[i];
      posCommBegin := richTxt.FindText(commBegin, startPos, endPos, []);
      posCommEnd := richTxt.FindText(commEnd, startPos, endPos, []);
      Inc(startPos, length(commBegin));

      richTxt.SelStart := posCommBegin;
      richTxt.SelLength := (posCommEnd - posCommBegin) + 1;

      richTxt.SelAttributes.Color := clGreen;
    end;
  end;

  richTxt.Lines.EndUpdate;
  FreeAndNil(startPosList);
end;

procedure TformEditFile.FindTextAndSelect(text: string);
var
  startPos, endPos, pos : Integer;
begin
  startPos := 0;

  {A posição final recebe o Length (tamanho total) do texto contido no RichEdit}
  endPos := Length(richTxt.Text);

  {Evita o delay na pesquisa pela palavra}
  richTxt.Lines.BeginUpdate;

  {Enquanto existir textos correspondentes ao da pesquisa}
  while richTxt.FindText(text, startPos, endPos, [stWholeWord]) <> -1 do
  begin
    endPos := Length(richTxt.Text) - startPos;
    pos := richTxt.FindText(text, startPos, endPos, [stWholeWord]);
    Inc(startPos, length(text));
    richTxt.SetFocus;
    richTxt.SelStart := pos;
    richTxt.SelLength := Length(text);
  end;

  richTxt.Lines.EndUpdate;
end;

procedure TformEditFile.FormCreate(Sender: TObject);
var
  formDefaultfolder : TformDefaultFolder;
  iniFile : TIniFile;
begin
  {Habilita para mostrar vazamentos de memória quando o programa for encerrado}
  ReportMemoryLeaksOnShutdown := True;

  {Instancia o arquivo ini em memória}
  iniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + INI_FILE_NAME);

  {Lê as definições de inicialização contidas no arquivo ini e alimenta as variáveis
  globais}
  gDefaultFolder := iniFile.ReadString('application_default_folder','default_folder','');
  gDontShowAgain := StrToBool(iniFile.ReadString('application_default_folder','dont_show_again', 'False'));
  gDefaultFont := iniFile.ReadString('text_editor_properties','default_font','');
  gDefaultFontSize := iniFile.ReadInteger('text_editor_properties','default_font_size',0);

  if (gDefaultFolder = '') and (not gDontShowAgain) then
  begin
    formDefaultfolder := TformDefaultFolder.Create(Self);
    formDefaultfolder.ShowModal;
  end;

  //Alimenta a combobox de fontes
  cbFont.Items := Screen.Fonts;
  {Define o estilo de fonte padrão}
  cbFont.ItemIndex := cbFont.Items.IndexOf(gDefaultFont);
  richTxt.Font.Name := cbFont.Items[cbFont.ItemIndex];
  {Define o tamanho de fonte padrão}
  cbFontSize.ItemIndex := cbFontSize.Items.IndexOf(IntToStr(gDefaultFontSize));
  richTxt.Font.Size := StrToInt(cbFontSize.Items[cbFontSize.ItemIndex]);

  FreeAndNil(iniFile);
end;

procedure TformEditFile.richTxtKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = 9 then
    ShowMessage('');

end;

procedure TformEditFile.richTxtSelectionChange(Sender: TObject);
begin
  {Verifica o estilo do texto selecionado e atualiza  o estado dos botões}
  if fsBold in richTxt.SelAttributes.Style then
    btnBold.Font.Style := btnBold.Font.Style + [fsBold]
  else
    btnBold.Font.Style := btnBold.Font.Style - [fsBold];

  if fsItalic in richTxt.SelAttributes.Style then
    btnItalic.Font.Style := btnItalic.Font.Style + [fsItalic]
  else
    btnItalic.Font.Style := btnItalic.Font.Style - [fsItalic];

  if fsUnderline in richTxt.SelAttributes.Style then
    btnUnderline.Font.Style := btnUnderline.Font.Style + [fsUnderline]
  else
    btnUnderline.Font.Style := btnUnderline.Font.Style - [fsUnderline];
end;

procedure TformEditFile.ApplicationEvents1Message(var Msg: tagMSG;
  var Handled: Boolean);
begin
  case Msg.Message of
    {Verifica se a tecla TAB foi pressionada.
    Quando o foco estiver no RichEdit o tab order deve ser desconsiderado, uma
    vez que o TAB em um editor de texto reresenta uma forma de espaçamento e deve
    executar uma ação específica.}
    WM_KEYDOWN:
    begin
      {Se a tecla apertada for o tab e o foco estiver no RichEdit...}
      if (Msg.wParam = VK_TAB) and (ActiveControl = richTxt)
      then
      begin
        {...então adiciona o tab space na posição do cursor}
        richTxt.SelText := #9;
        Abort;
      end;
    end ;
  end;
end;

procedure TformEditFile.btnBoldClick(Sender: TObject);
begin
  if fsBold in btnBold.Font.Style then
    btnBold.Font.Style := btnBold.Font.Style - [fsBold]
  else
    btnBold.Font.Style := btnBold.Font.Style + [fsBold];

  if fsBold in richTxt.SelAttributes.Style then
    richTxt.SelAttributes.Style := richTxt.SelAttributes.Style - [fsBold]
  else
    richTxt.SelAttributes.Style := richTxt.SelAttributes.Style + [fsBold];

  richTxt.SetFocus;
end;

procedure TformEditFile.btnUnderlineClick(Sender: TObject);
begin
  if fsUnderline in btnUnderline.Font.Style then
    btnUnderline.Font.Style := btnUnderline.Font.Style - [fsUnderline]
  else
    btnUnderline.Font.Style := btnUnderline.Font.Style + [fsUnderline];

  if fsUnderline in richTxt.SelAttributes.Style then
    richTxt.SelAttributes.Style := richTxt.SelAttributes.Style - [fsUnderline]
  else
    richTxt.SelAttributes.Style := richTxt.SelAttributes.Style + [fsUnderline];

  richTxt.SetFocus;
end;

procedure TformEditFile.btnItalicClick(Sender: TObject);
begin
  if fsItalic in btnItalic.Font.Style then
    btnItalic.Font.Style := btnItalic.Font.Style - [fsItalic]
  else
    btnItalic.Font.Style := btnItalic.Font.Style + [fsItalic];

  if fsItalic in richTxt.SelAttributes.Style then
    richTxt.SelAttributes.Style := richTxt.SelAttributes.Style - [fsItalic]
  else
    richTxt.SelAttributes.Style := richTxt.SelAttributes.Style + [fsItalic];

  richTxt.SetFocus;
end;

end.
